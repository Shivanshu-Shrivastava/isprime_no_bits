    def isp(self,n):
 
        # Corner cases
        if (n <= 1): return False
        if (n <= 3): return True
     
        # This is checked so that we can skip
        # middle five numbers in below loop
        if (n % 2 == 0 or n % 3 == 0):
            return False
             
        i = 5;
        while (i * i <= n):
            if(n % i == 0 or n % (i + 2) == 0):
                return False;
            i = i + 6;
     
        return True
    # isp(2)
	def primeSetBits(self, L, R):
		# code here
		count=0
		for i in range(L,R+1):
		    to = str(bin(i))
		    co1= to.count('1')
		  #  x = isp(co1)
		    if self.isp(co1)==True:
		        count+=1
		return count
